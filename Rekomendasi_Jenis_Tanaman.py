# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1etPQEk9L8Hs0Oa_byixTFLzNvl6-XzED

#Predictive Analytics - Crop Recommendation

Nama: Atika Oktavianti

Username: atika_oktavianti_0gNF
"""

# Memasang Kaggle API
!pip install -q kaggle

# Upload file kaggle.json
from google.colab import files
files.upload()

# Mengunduh dataset dari Kaggle
!kaggle datasets download -d atharvaingle/crop-recommendation-dataset

# Mengekstrak file zip
!unzip -q crop-recommendation-dataset.zip

"""#Import Library"""

# Import library dasar
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Untuk modelling dan evaluasi
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

"""#Load Dataset"""

# Menampilkan semua kolom
pd.set_option('display.max_columns', None)
# Load dataset
df = pd.read_csv('Crop_recommendation.csv')

# Tampilkan 5 baris pertama
df.head()

"""#Eksplorasi Data Awal (EDA) dan Visualisasi Data"""

# Ukuran dataset
print(f"Jumlah baris dan kolom: {df.shape}")

# Informasi tipe data
df.info()

# Statistik deskriptif
df.describe()

"""**Mengecek missing value**"""

#Cek missing values
print("Jumlah missing value di setiap kolom:")
print(df.isnull().sum())

"""**Mengecek Jumlah Target (jenis tanaman)**"""

# Jumlah kelas target
print("Jumlah kelas tanaman unik:", df['label'].nunique())
print("\nDaftar jenis tanaman:")
print(df['label'].unique())

"""**Visualisasi distribusi label tanaman**"""

plt.figure(figsize=(12, 6))
sns.countplot(data=df, x='label', order=df['label'].value_counts().index)
plt.xticks(rotation=90)
plt.title('Distribusi Tanaman pada Dataset')
plt.xlabel('Tanaman')
plt.ylabel('Jumlah')
plt.show()

"""**Korelasi antar fitur**"""

plt.figure(figsize=(10, 8))

# Pilih hanya kolom numerik untuk korelasi
numerical_features = df.select_dtypes(include=[np.number])

sns.heatmap(numerical_features.corr(), annot=True, cmap='YlGnBu')
plt.title("Korelasi Antar Fitur Numerik")
plt.show()

"""#Preprocessing Data

**Encoding Label**
"""

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

# Inisialisasi label encoder
le = LabelEncoder()

# Encode kolom label
df['label_encoded'] = le.fit_transform(df['label'])

# Fitur dan target
X = df.drop(columns=['label', 'label_encoded'])
y = df['label_encoded']

# Informasi tipe data
df.info()

"""**Split data**"""

# Split data: 80% training, 20% testing
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y)

print(f"Ukuran data train: {X_train.shape}")
print(f"Ukuran data test: {X_test.shape}")

"""#Modelling dan Evaluasi

**Random Forest**
"""

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)

"""**Evaluasi Model Random Forest**"""

from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Prediksi
y_pred_rf = rf.predict(X_test)

# Evaluasi teks
print("=== Random Forest ===")
print("Accuracy:", accuracy_score(y_test, y_pred_rf))
print("Classification Report:\n", classification_report(y_test, y_pred_rf))

# Confusion Matrix
cm = confusion_matrix(y_test, y_pred_rf)

# Plot heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(cm, annot=True, fmt="d", cmap="YlGnBu", cbar=False,
            xticklabels=le.classes_, yticklabels=le.classes_)
plt.title("Confusion Matrix - Random Forest", fontsize=16)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

"""**XGBoost**"""

!pip install xgboost --quiet

from xgboost import XGBClassifier

# Inisialisasi tanpa use_label_encoder
xgb = XGBClassifier(eval_metric='mlogloss', random_state=42)
xgb.fit(X_train, y_train)

"""**Evaluasi Model XCBoost**"""

from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

y_pred_xgb = xgb.predict(X_test)

print("=== XGBoost Classifier ===")
print("Accuracy:", accuracy_score(y_test, y_pred_xgb))
print("Classification Report:\n", classification_report(y_test, y_pred_xgb))

cm_xgb = confusion_matrix(y_test, y_pred_xgb)

plt.figure(figsize=(12, 10))
sns.heatmap(cm_xgb, annot=True, fmt="d", cmap="PuBuGn", cbar=False,
            xticklabels=le.classes_, yticklabels=le.classes_)
plt.title("Confusion Matrix - XGBoost", fontsize=16)
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()

"""**SVM (Support Vector Machine)**"""

from sklearn.svm import SVC

# Inisialisasi model
svm_model = SVC(random_state=42)

# Training
svm_model.fit(X_train, y_train)

"""**Evaluasi Model SVM**"""

# Prediksi dan evaluasi
y_pred_svm = svm_model.predict(X_test)

print("=== Support Vector Machine ===")
print("Accuracy:", accuracy_score(y_test, y_pred_svm))
print("Classification Report:\n", classification_report(y_test, y_pred_svm, target_names=le.classes_))

# Visualisasi confusion matrix
cm = confusion_matrix(y_test, y_pred_svm)
plt.figure(figsize=(10,7))
sns.heatmap(cm, annot=True, fmt='d', cmap='coolwarm', xticklabels=le.classes_, yticklabels=le.classes_)
plt.title('Confusion Matrix - SVM')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()

"""**Perbandingan ketiga algorima (Random forest, XGBoost dan SVM**"""

import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

# Train model SVM
svm_model = SVC(random_state=42)
svm_model.fit(X_train, y_train)

# Hitung akurasi ketiga model
acc_rf = accuracy_score(y_test, rf.predict(X_test))
acc_xgb = accuracy_score(y_test, xgb.predict(X_test))
acc_svm = accuracy_score(y_test, svm_model.predict(X_test))

# Data untuk plot
models = ['Random Forest', 'XGBoost', 'SVM']
accuracies = [acc_rf, acc_xgb, acc_svm]

# Plot diagram batang
plt.figure(figsize=(8,5))
bars = plt.bar(models, accuracies, color=['skyblue', 'salmon', 'lightgreen'])
plt.ylim([0,1])
plt.ylabel('Accuracy')
plt.title('Perbandingan Akurasi Model')

# Tambahkan nilai akurasi di atas batang
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2, yval + 0.01, f"{yval:.4f}", ha='center', va='bottom')

plt.show()